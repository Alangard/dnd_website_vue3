# Generated by Django 4.1.7 on 2023-04-15 14:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=150, null=True)),
                ("avatar", models.URLField(blank=True, default="")),
                ("date_created", models.DateField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Account",
                "verbose_name_plural": "Account",
                "db_table": "Account",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("n", "normal"), ("b", "banned"), ("d", "deleted")],
                        default="n",
                        max_length=5,
                    ),
                ),
                ("comment_text", models.TextField()),
                ("replies_count", models.IntegerField(blank=True, default=0)),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("created_date", models.DateField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
                ("updated_date", models.DateField(auto_now=True)),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="journal_api.comment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comment",
                "db_table": "Comment",
                "ordering": ["-created_datetime"],
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("description", models.CharField(blank=True, max_length=500)),
                ("body", models.TextField(blank=True)),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("created_date", models.DateField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
                ("updated_date", models.DateField(auto_now=True)),
                ("is_publish", models.BooleanField(default=False)),
                ("publish_datetime", models.DateTimeField(blank=True)),
                ("comments_count", models.IntegerField(default=0)),
                ("commented", models.BooleanField(default=False)),
                ("reacted", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post",
                "verbose_name_plural": "Post",
                "db_table": "Post",
                "ordering": ["-created_datetime"],
            },
        ),
        migrations.CreateModel(
            name="ReactionCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category_name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Reaction_category",
                "verbose_name_plural": "Reaction_category",
                "db_table": "Reaction_category",
            },
        ),
        migrations.CreateModel(
            name="ReportReason",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("formulation", models.CharField(max_length=250, unique=True)),
            ],
            options={
                "verbose_name": "Report_reason",
                "verbose_name_plural": "Report_reasons",
                "db_table": "Report_reason",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=150, null=True, unique=True)),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tag",
                "db_table": "Tag",
            },
        ),
        migrations.CreateModel(
            name="Reaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reaction_name", models.CharField(max_length=250, unique=True)),
                ("reaction_url", models.CharField(max_length=2048)),
                (
                    "reaction_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="journal_api.reactioncategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reaction",
                "verbose_name_plural": "Reaction",
                "db_table": "Reaction",
            },
        ),
        migrations.CreateModel(
            name="PostReaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reacted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="journal_api.post",
                    ),
                ),
                (
                    "reaction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="journal_api.reaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post_reaction",
                "verbose_name_plural": "Post_reaction",
                "db_table": "Post_reaction",
            },
        ),
        migrations.AddField(
            model_name="post",
            name="reactions",
            field=models.ManyToManyField(
                blank=True,
                related_name="reactions",
                through="journal_api.PostReaction",
                to="journal_api.reaction",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="tags",
            field=models.ManyToManyField(blank=True, to="journal_api.tag"),
        ),
        migrations.CreateModel(
            name="CommentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("report_comment_formulation", models.TextField()),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="journal_api.comment",
                    ),
                ),
                (
                    "report_reason",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="journal_api.reportreason",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment_report",
                "verbose_name_plural": "Comment_report",
                "db_table": "Comment_report",
            },
        ),
        migrations.AddField(
            model_name="comment",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="journal_api.post",
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="report_reasons",
            field=models.ManyToManyField(
                blank=True,
                through="journal_api.CommentReport",
                to="journal_api.reportreason",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="favorites_reaction",
            field=models.ManyToManyField(
                blank=True, related_name="favorites_reaction", to="journal_api.reaction"
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="recent_reaction",
            field=models.ManyToManyField(
                blank=True, related_name="recent_reaction", to="journal_api.reaction"
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
