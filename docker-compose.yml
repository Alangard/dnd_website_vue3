services:
  backend:
    build: 
      dockerfile: ./backend/Dockerfile
    container_name: JournalAPI
    #  gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 200 --workers=5
    command: >
      bash -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      daphne -b 0.0.0.0 -p 8000 config.asgi:application&&
      python manage.py collectstatic --no-input"
    ports:
      - 8000:8000
      - 587:587
    restart: always
    depends_on:
      - db
    volumes:
      - ./backend/:/code/backend/
      - static_volume:/code/static
      - media_volume:/code/media
    env_file:
      - ./.env/.env.prod
    networks:
      api_network:

  # daphne:
  #   container_name: JournalDaphe
  #   build: 
  #     dockerfile: ./backend/Dockerfile
  #   command: bash -c " daphne -b 0.0.0.0 -p 8001 config.asgi:application"
  #   ports:
  #     - "8001:8001"
  #   volumes:
  #     - ./backend/:/code/backend/
  #   env_file:
  #     - ./.env/.env.prod
  #   networks:
  #     api_network:
  

  nginx:
    container_name: JournalNginx
    image: nginx:1.25-alpine
    restart: unless-stopped
    volumes:
       # path template to use env variables
      - ./nginx/nginx_dev.conf:/etc/nginx/conf.d/nginx.tmpl
      - static_volume:/code/static
      - media_volume:/code/media/
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    env_file:
      - ./.env/.env.prod
    # use env variables
    command: /bin/sh -c "envsubst < /etc/nginx/conf.d/nginx.tmpl > /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"
    networks:
      api_network:

  frontend:
    build: 
      dockerfile: ./client/Dockerfile
    container_name: JournalFrontend
    command: > 
      /bin/sh -c "npm run build"
    ports:
      - 8080:8080
    restart: always
    depends_on:
        - backend
    volumes:
      - ./client:/code/client/
      - static_volume:/code/static/
      - media_volume:/code/media/
    env_file:
        - ./.env/.env.prod
    networks:
        api_network:

  # Database Service
  db:
    container_name: JournalPostgreSQL
    image: postgres:16.2-alpine
    expose:
      - 5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env/.env.prod
    networks:
      api_network:

# Celery Service
  celery:
    container_name: JournalCelery
    build: 
      dockerfile: ./backend/Dockerfile
    command: celery -A config worker --loglevel=info
    volumes:
      - ./backend/:/code/backend/
    env_file:
      - ./.env/.env.prod
    depends_on:
        - backend
        - redis
    networks:
      api_network:

  #Redis Service
  redis:
    container_name: JournalRedis
    image: "redis:7.2-alpine"
    networks:
      api_network:

  
volumes:
  # will be used to store our ssl certificate and make it persistent as wel   
  static_volume:
  media_volume:
  postgres_data:
  certbot_www:
    
networks:
  api_network: